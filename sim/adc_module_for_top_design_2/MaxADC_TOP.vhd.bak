-------------------------------------------------------------------------------
-- Title      : Programme memory for the horizontally programmed
--              LAB2 ELEC4406
-- Project    : 
-------------------------------------------------------------------------------
-- File       : LAB2_TOP.vhd
-- Author     : Michael Cantoni & Antonio Cantoni
-- Company    : The University of Melbourne
-- Last update: 
-- Platform   : 
-------------------------------------------------------------------------------
-- Description: Programme memory for the horizontally programmed
--              LAB2 ELEC4406
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2007/02/10  1.0      MC	Created
-- 2014/01/09  2.0      MC      Modified to work with new AD/DA daughter board
--                              and ALTERA DE1 development board
--                              + updated commenting
-- 2/4/2020			Antonio	Many changes  in code and architecture
--                BIT SET adnd BIT CLEAR ROUT register
--                UART interface for displaying captured signal
--                ADC interface for MAX 10 ADC
--                DAC interface for Digilent DA2 DAC
--                Frame start signla generation.

-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2007/01/27  1.0      MC	Created
-- 2014/01/12  2.0      MC      Modified to work with new AD/DA daughter board
--                              and Altera DE1 development board. Provided
--                              additional comments 
-------------------------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Programmable_FIR_via_Registers_pkg_adc.ALL;

entity LAB2_TOP is
  
  port (
	clk_in         	: in std_logic;
	rst_in_L        	: in std_logic;
	data_in  			: in std_logic_vector(13 downto 0);
	data_out				: out std_logic_vector(14 downto 0);
--	nosin            	: in std_logic_vector(6 downto 0);
--	internalSource		: in  std_logic;
--	strb_nos       	: in std_logic; -- assumed to be debounced (e.g. KEY1 on DE1 board)
--	USBCTS				: in  STD_LOGIC;
--	USBV5					: in  STD_LOGIC;
--	USBTXD				: in  STD_LOGIC;
--	USBDTR				: in  STD_LOGIC;
--	USBRXD				: out  STD_LOGIC;
--	ssd_LODOT       	: out std_logic_vector(7 downto 0);
--	ssd_HIDOT       	: out std_logic_vector(7 downto 0);  
--	ssd_PC_LODOT      : out std_logic_vector(7 downto 0);
--	ssd_PC_HIDOT      : out std_logic_vector(7 downto 0);
--	ssd_RAM_LODOT     : out std_logic_vector(7 downto 0);
--	ssd_RAM_HIDOT     : out std_logic_vector(7 downto 0);
--	TRIG_OUT				: out std_logic;
--	FRAME_SYNC			: out std_logic;
--	SENSE1				: out STD_LOGIC;
--	SENSE2				: out STD_LOGIC;
--	SENSE3				: out STD_LOGIC;
--   SENSE4				: out STD_LOGIC;
--	adc_qsys_cmd_vld 	: out std_logic;
--	adc_qsys_resp_vld : out std_logic;
--	adc_qsys_cmd_rdy 	: out std_logic;
--	led_out				: out std_logic_vector(9 downto 0) := (others=>'1')); -- generate signal internal
--  
end LAB2_TOP;

architecture bhv of LAB2_TOP is

component ADC
   port (
		clk_clk       : in std_logic := '0'; --   clk.clk
		reset_reset_n : in std_logic := '0';  -- reset.reset_n
		dout          : buffer std_logic_vector(11 downto 0);   --***** added dout to be connected to control_internal_response_data *****
		rsp_sop       : out std_logic;							 --***** added dout to be connected to control_internal_response_data *****
		rsp_eop		  : out std_logic;							 --***** added dout to be connected to control_internal_response_data *****
		cmd_ready	  : out std_logic;							 --***** added dout to be connected to control_internal_response_data *****
		rsp_valid	  : buffer std_logic;		--***** added dout to be connected to control_internal_response_data *****
		reg_data_out  : out std_logic_vector(11 downto 0);
		c0            : out std_logic
	);
	end component ADC;

component Programmable_FIR_via_Registers_adc is
	
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        coeffs_in                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        write_address                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        write_enable                      :   IN    std_logic;
        write_done                        :   IN    std_logic;
        filter_in                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        ce_out                            :   OUT   std_logic;
        filter_out                        :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En13
--		  reg_data_out  : buffer std_logic_vector(11 downto 0);
--		  rsp_valid	  : IN std_logic
        );
END  component Programmable_FIR_via_Registers_adc;

begin
  adc : component ADC
		port map (
			clk_clk                  	=> clk_in,                                          --            clock.clk
			reset_sink_reset_n         => rst_in_L,         --       reset_sink.reset_n
			reg_data_out         	   => filter_in(11 downto 0)                                       --    adc_pll_clock.clk
			
		);
	FIR : component Programmable_FIR_via_Registers_adc
		port map (
			clk                  	=> c0,                                                     --            clock.clk
			reset         				=> reset,         --       reset_sink.reset_n
			                                      --    adc_pll_clock.clk
			
		);