-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\dspprogfirhdl\Programmable_FIR_via_Registers_tb.vhd
-- Created: 2021-09-08 14:27:01
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- filter_out                    ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Programmable_FIR_via_Registers_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.Programmable_FIR_via_Registers_pkg_adc.ALL;
USE work.Programmable_FIR_via_Registers_tb_pkg_adc.ALL;

ENTITY Programmable_FIR_via_Registers_tb_adc IS
END Programmable_FIR_via_Registers_tb_adc;


ARCHITECTURE rtl OF Programmable_FIR_via_Registers_tb_adc IS

  -- Component Declarations
  COMPONENT Programmable_FIR_via_Registers
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          coeffs_in                       :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          write_address                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          write_enable                    :   IN    std_logic;
          write_done                      :   IN    std_logic;
          filter_in                       :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          ce_out                          :   OUT   std_logic;
          filter_out                      :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En13
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Programmable_FIR_via_Registers
    USE ENTITY work.Programmable_FIR_via_Registers_adc(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL filter_out_done                  : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL filter_out_done_enb              : std_logic;  -- ufix1
  SIGNAL filter_out_addr                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL filter_out_active                : std_logic;  -- ufix1
  SIGNAL host_write_data_addr             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL filter_input_addr_delay_1        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL rawData_filter_in                : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL holdData_filter_in               : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL filter_in_offset                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL filter_in                        : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL filter_in_1                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL write_done_addr_delay_1          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rawData_write_done               : std_logic;
  SIGNAL holdData_write_done              : std_logic;
  SIGNAL write_done_offset                : std_logic;
  SIGNAL write_done                       : std_logic;
  SIGNAL write_enable_addr_delay_1        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rawData_write_enable             : std_logic;
  SIGNAL holdData_write_enable            : std_logic;
  SIGNAL write_enable_offset              : std_logic;
  SIGNAL write_enable                     : std_logic;
  SIGNAL Host_Behavioral_Model_out3_addr_delay_1 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rawData_write_address            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL holdData_write_address           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL write_address_offset             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL write_address                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL write_address_1                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL host_write_data_active           : std_logic;  -- ufix1
  SIGNAL host_write_data_enb              : std_logic;  -- ufix1
  SIGNAL host_write_data_addr_delay_1     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rawData_coeffs_in                : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL holdData_coeffs_in               : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL coeffs_in_offset                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL coeffs_in                        : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL coeffs_in_1                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL filter_out                       : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL filter_out_enb                   : std_logic;  -- ufix1
  SIGNAL filter_out_lastAddr              : std_logic;  -- ufix1
  SIGNAL filter_out_signed                : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL filter_out_addr_delay_1          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL filter_out_expected              : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL filter_out_ref                   : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL filter_out_testFailure           : std_logic;  -- ufix1

BEGIN
  u_Programmable_FIR_via_Registers : Programmable_FIR_via_Registers
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              coeffs_in => coeffs_in_1,  -- sfix14_En13
              write_address => write_address_1,  -- uint8
              write_enable => write_enable,
              write_done => write_done,
              filter_in => filter_in_1,  -- sfix14_En13
              ce_out => ce_out,
              filter_out => filter_out  -- sfix15_En13
              );

  filter_out_done_enb <= filter_out_done AND rdEnb;

  
  filter_out_active <= '1' WHEN filter_out_addr /= to_unsigned(16#1F4#, 9) ELSE
      '0';

  filter_input_addr_delay_1 <= host_write_data_addr AFTER 1 ns;

  -- Data source for filter_in -This process reads in all lines ignoring bits 16 and 15 as they are always 0
  filter_in_fileread: PROCESS (filter_input_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "filter_in.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_filter_in <= signed(read_data(13 DOWNTO 0));
  END PROCESS filter_in_fileread;

  -- holdData reg for filter_input - data read in is held in a register hold register
  stimuli_filter_input_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_filter_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_filter_in <= rawData_filter_in;
    END IF;
  END PROCESS stimuli_filter_input_process;
	-- for rdEnb 0 either holdData or rawData is transfered to filter_in_offset
  stimuli_filter_input_1: PROCESS (rawData_filter_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      filter_in_offset <= holdData_filter_in;
    ELSE
      filter_in_offset <= rawData_filter_in;
    END IF;
  END PROCESS stimuli_filter_input_1;

  filter_in <= filter_in_offset AFTER 2 ns;

  filter_in_1 <= std_logic_vector(filter_in);
	-- prepare for the next process data source for write_done
  write_done_addr_delay_1 <= host_write_data_addr AFTER 1 ns;

  -- Data source for write_done -same process as with filter_in.dat reading, but with the write_done.dat into the write_done register 
  write_done_fileread: PROCESS (write_done_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "write_done.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_write_done <= read_data;
  END PROCESS write_done_fileread;

  -- holdData reg for write_done
  stimuli_write_done_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_write_done <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_write_done <= rawData_write_done;
    END IF;
  END PROCESS stimuli_write_done_process;

  stimuli_write_done_1: PROCESS (rawData_write_done, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      write_done_offset <= holdData_write_done;
    ELSE
      write_done_offset <= rawData_write_done;
    END IF;
  END PROCESS stimuli_write_done_1;

  write_done <= write_done_offset AFTER 2 ns;

  write_enable_addr_delay_1 <= host_write_data_addr AFTER 1 ns;

  -- Data source for write_enable
  write_enable_fileread: PROCESS (write_enable_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "write_enable.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_write_enable <= read_data;
  END PROCESS write_enable_fileread;

  -- holdData reg for write_enable
  stimuli_write_enable_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_write_enable <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_write_enable <= rawData_write_enable;
    END IF;
  END PROCESS stimuli_write_enable_process;

  stimuli_write_enable_1: PROCESS (rawData_write_enable, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      write_enable_offset <= holdData_write_enable;
    ELSE
      write_enable_offset <= rawData_write_enable;
    END IF;
  END PROCESS stimuli_write_enable_1;

  write_enable <= write_enable_offset AFTER 2 ns;

  Host_Behavioral_Model_out3_addr_delay_1 <= host_write_data_addr AFTER 1 ns;

  -- Data source for write_address
  write_address_fileread: PROCESS (Host_Behavioral_Model_out3_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "write_address.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(7 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_write_address <= unsigned(read_data(7 DOWNTO 0));
  END PROCESS write_address_fileread;

  -- holdData reg for Host_Behavioral_Model_out3
  stimuli_Host_Behavioral_Model_out3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_write_address <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_write_address <= rawData_write_address;
    END IF;
  END PROCESS stimuli_Host_Behavioral_Model_out3_process;

  stimuli_Host_Behavioral_Model_out3_1: PROCESS (rawData_write_address, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      write_address_offset <= holdData_write_address;
    ELSE
      write_address_offset <= rawData_write_address;
    END IF;
  END PROCESS stimuli_Host_Behavioral_Model_out3_1;

  write_address <= write_address_offset AFTER 2 ns;

  write_address_1 <= std_logic_vector(write_address);
	-- data address is writen when host_write_data_active flag is one and when the address is not equivalent to to_unsigned(16#1F4#, 9) in which case it terminates the process 
  
  host_write_data_active <= '1' WHEN host_write_data_addr /= to_unsigned(16#1F4#, 9) ELSE
      '0';

  host_write_data_enb <= host_write_data_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 500
  HostBehavioralModel_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN			--set write address to 000
      host_write_data_addr <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF host_write_data_enb = '1' THEN			-- incremement address and check to see if we are at the end of the memory to_unsigned(16#1F4#, 9) as 1F4# is 500 decimal (for 500 count to value)
        IF host_write_data_addr >= to_unsigned(16#1F4#, 9) THEN 
          host_write_data_addr <= to_unsigned(16#000#, 9);
        ELSE 
          host_write_data_addr <= host_write_data_addr + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS HostBehavioralModel_process;


  host_write_data_addr_delay_1 <= host_write_data_addr AFTER 1 ns;

  -- Data source for coeffs_in
  coeffs_in_fileread: PROCESS (host_write_data_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "coeffs_in.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_coeffs_in <= signed(read_data(13 DOWNTO 0));
  END PROCESS coeffs_in_fileread;

  -- holdData reg for host_write_data
  stimuli_host_write_data_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_coeffs_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_coeffs_in <= rawData_coeffs_in;
    END IF;
  END PROCESS stimuli_host_write_data_process;

  stimuli_host_write_data_1: PROCESS (rawData_coeffs_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      coeffs_in_offset <= holdData_coeffs_in;
    ELSE
      coeffs_in_offset <= rawData_coeffs_in;
    END IF;
  END PROCESS stimuli_host_write_data_1;

  coeffs_in <= coeffs_in_offset AFTER 2 ns;

  coeffs_in_1 <= std_logic_vector(coeffs_in);

  snkDonen <=  NOT check1_done;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  filter_out_enb <= ce_out AND filter_out_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 500
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      filter_out_addr <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF filter_out_enb = '1' THEN
        IF filter_out_addr >= to_unsigned(16#1F4#, 9) THEN 
          filter_out_addr <= to_unsigned(16#000#, 9);
        ELSE 
          filter_out_addr <= filter_out_addr + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  filter_out_lastAddr <= '1' WHEN filter_out_addr >= to_unsigned(16#1F4#, 9) ELSE
      '0';

  filter_out_done <= filter_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF filter_out_done_enb = '1' THEN
        check1_done <= filter_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  filter_out_signed <= signed(filter_out);

  filter_out_addr_delay_1 <= filter_out_addr AFTER 1 ns;

  -- Data source for filter_out_expected
  filter_out_expected_fileread: PROCESS (filter_out_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "filter_out_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    filter_out_expected <= signed(read_data(14 DOWNTO 0));
  END PROCESS filter_out_expected_fileread;

  filter_out_ref <= filter_out_expected;

  filter_out_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      filter_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND filter_out_signed /= filter_out_ref THEN
        filter_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in filter_out_signed: Expected " & to_hex(filter_out_ref) & (" Actual " & to_hex(filter_out_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS filter_out_signed_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF filter_out_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

